worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;
    	server_name _;
        # location / {
        #     default_type text/html;

        #     content_by_lua_block {
        #         ngx.say("Hello OpenResty")
        #     }
        # }

        location ~ ^/api/([-_a-zA-Z0-9/]+).do$ {
            # 准入阶段完成参数验证
            # access_by_lua_file  lua/access_check.lua;

            #内容生成阶段
            content_by_lua_file lua/$1.lua;
        }

        location = /sum{
            # 只允许内部调用
            internal;

            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))                
            }
        }

        location = /subduction{
            # 只允许内部调用
            internal;

            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))                
            }
        }

        # 并行执行
        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi({
                    {"/sum", {
                        args={a=3, b=8}
                    }},
                    {"/subduction", {
                        args={a=3, b=8}
                    }}
                })

                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        # 顺序执行
        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1 = ngx.location.capture_multi(
                    {{"/sum", {args={a=3, b=8}}}}
                )
                local res2 = ngx.location.capture_multi(
                    {{"/subduction", {args={a=3, b=8}}}}
                )
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        location ~ ^/static/([-_a-zA-Z0-9/]+).jpg {
            set $image_name $1;
            content_by_lua_block {
                ngx.exec("/download_internal/images/" .. ngx.var.image_name .. ".jpg")
            }
        }

        location /download_internal {
            internal;
            # 这里还可以有其他统一的 download 下载设置，例如限速等
            alias ../download;
        }

        location = /foo {
            content_by_lua_block{
                ngx.say([[I am foo]])
            }
        }

        # 模拟http跳向https
        location = / {
            rewrite_by_lua_block {
                return ngx.redirect('/foo')
            }
        }
    }
}
