worker_processes 1;
error_log logs/error.log info;
events {
    worker_connections 1024;
}

http{
    server {
        listen 80;
        #resolver 127.0.0.1 [::1]:3306 valid=30s;
        location /test {
            content_by_lua_block {
               local mysql = require 'resty.mysql'
               local db, err = mysql:new()

               if not db then
                    ngx.say('failed to instantiate mysql: ', err)
                    return
               end

               db:set_timeout(1000)  -- 1 sec

               local ok, err, errno, sqlstate = db:connect{
                   --rm-bp1q72l45bfudwh49no.mysql.rds.aliyuncs.com
                   --Error info: failed to connect: no resolver defined to resolve "xxxxxxxxxxxx.mysql.rds.aliyuncs.com".
                   --https://github.com/openresty/lua-resty-mysql/issues/17
                   host = '47.98.25.121',
                   port = 3306,
                   database = 'xfind',
                   user = 'xfind_admin',
                   password = 'Xfind123',
                   max_packet_size = 1024 * 1024
               }

               if not ok then
                    ngx.say('failed to connect: ', err, ':', errno, ' ', sqlstate)
                    return
               end

               ngx.say('connected to mysql.')

               local res, err, errno, sqlstate = 
                    db:query('drop table if exists cats')
                if not res then
                    ngx.say('bad request1: ', err, ': ', errno, ': ', sqlstate, '.')
                    return
                end

                res, err, errno, sqlstate = 
                    db:query('create table cats '
                            .. '(id serial primary key, '
                            .. 'name varchar(5))')
                if not res then 
                    ngx.say('bad result2: ', err, ': ', errno, ': ', sqlstate, '.')
                    return
                end

                ngx.say('table cats created.')

                res, err, errno, sqlstate = 
                    db:query('insert into cats (name) '
                                .. 'values (\'Bob\'),(\'\'),(null)')
                if not res then
                    ngx.say('bad result3: ', err, ': ', erron, ': ', sqlstate, '.')
                    return
                end

                ngx.say(res.affected_rows, ' rows inserted into table cats ',
                                            '(last insert id: ', res.insert_id, ')')

                 -- 注意这里的sql注入
                local req_id = [[1'; drop table cats;--]]
                res, err, errno, sqlstate = 
                    -- ndk.set_var.set_quote_sql_str()作用是防止sql注入
                    db:query(string.format([[select * from cats where id = '%s']], ndk.set_var.set_quote_sql_str(req_id)))

                if not res then
                    ngx.say('bad result4: ', err, ':', errno, ' ', sqlstate, '.')
                    return
                end

                local cjson = require 'cjson'
                ngx.say('result: ', cjson.encode(res))

                res, err, errno, sqlstate = 
                    db:query([[select * from cats where id = 1]])

                if not res then
                    ngx.say('bad result5: ', err, ': ', errno, ': ', sqlstate, '.')
                    return
                end

                db:set_keepalive(10000, 100)
            }
        }
    }
}